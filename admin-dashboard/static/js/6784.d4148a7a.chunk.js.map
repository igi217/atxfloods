{"version":3,"file":"static/js/6784.d4148a7a.chunk.js","mappings":"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","sources":["components/ActionButton.js","components/CameraTable.js"],"sourcesContent":["import React, { Component }  from 'react';\r\nconst ActionButton = (props) => {\r\n    return(\r\n        <>\r\n        {\r\n            (props.onView) ? <i className=\"fa-solid fa-eye pointer me-2 text-info\" onClick={props.onView}></i> : ''\r\n        }\r\n            <i className=\"fa-solid fa-trash pointer text-danger\" onClick={props.onDelete}></i>\r\n            <i className=\"fa-solid fa-pen-to-square pointer ms-2 text-warning\" onClick={props.onEdit}></i>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ActionButton;","import React from \"react\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport Constants, { userToken } from \"src/Constants\";\r\nimport ActionButton from \"./ActionButton\";\r\nimport { CCard, CCardBody} from \"@coreui/react\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n\r\nconst CameraTable = () => {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const [data, setData] = React.useState([]);\r\n    const [pagination, setPagination] = React.useState({\r\n        per_page: 10,\r\n        page_number: 1\r\n    })\r\n    const [load, setLoad] = React.useState(true)\r\n    const [total, setTotal] = React.useState(0);\r\n    const handleChange = () => {\r\n\r\n    }\r\n    const columns = [\r\n        {\r\n            name: 'Id',\r\n            selector: row => row.id,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Name',\r\n            selector: row => <Link to={`/camera-details/${row.id}`} className='fw-bold link-dark text-decoration-none'>{row.name}</Link>,\r\n            sortable: true,\r\n        },\r\n\r\n        {\r\n            name: 'Address',\r\n            selector: row => row.address,\r\n            sortable: true,\r\n        },\r\n        // {\r\n        //     name: 'Images',\r\n        //     selector: row => (row.images.length) ?  <img className=\"pointer p-2 w-50\" alt={row.images[0].image_name} src={Constants.base +\"uploads/\" + row.images[0].image_name} /> : 'No Images',\r\n        //     sortable: true,\r\n        // },\r\n        {\r\n            name: 'Last Modified',\r\n            selector: row => new Date(row.updated_at).toLocaleString(),\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Action',\r\n            selector: (row) => <ActionButton onEdit={() => handleEdit(row)} onDelete={() => handleDelete(row.id)} />,\r\n            sortable: true\r\n        }\r\n    ];\r\n\r\n    // const handleView = (row) => {\r\n    //     navigate('/cameras/view', { state: row });\r\n    // }\r\n\r\n    const handleEdit = (row) => {\r\n        // console.log(row);\r\n        navigate('/cameras/edit', { state: row });\r\n    }\r\n\r\n    const handleDelete = async (id) => {\r\n        let url = Constants.deleteCameras + id;\r\n        let response = await fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': userToken(),\r\n\r\n            }\r\n        })\r\n        let json = await response.json();\r\n        if (json.status === 200) {\r\n            setLoad(!load);\r\n            toast.success(\"Record deleted successfully!\");\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        let url = Constants.cameras;\r\n\r\n\r\n        (async () => {\r\n            let response = await fetch(url + `?per_page=${pagination.per_page}&page_number=${pagination.page_number}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': userToken(),\r\n\r\n                }\r\n            })\r\n            let data = await response.json();\r\n            setData(data.attributes\r\n                );\r\n            setTotal(data.totalResult);\r\n\r\n\r\n        })()\r\n    }, [pagination, load] )\r\n\r\n\r\n    return (\r\n        <>\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                theme=\"colored\"\r\n                autoClose={5000}\r\n                hideProgressBar={false}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover />\r\n\r\n                \r\n            <CCard className=\"my-2\">\r\n                <CCardBody>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\">\r\n                            <h5 className=\"text-uppercase\">All Cameras</h5>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                        <Link to=\"/cameras/add\" className=\"btn text-uppercase btn-primary m-2 float-end\">Add</Link>\r\n                        </div>\r\n                    </div>\r\n                </CCardBody>\r\n            </CCard>\r\n            <DataTable\r\n                columns={columns}\r\n                data={data}\r\n                pagination\r\n                onSelectedRowsChange={handleChange}\r\n                paginationServer\r\n                paginationTotalRows={total}\r\n                onChangeRowsPerPage={(per_page) => setPagination({ ...pagination, per_page })}\r\n                onChangePage={(page_number, per_page) => setPagination({ ...pagination, page_number })}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CameraTable;"],"names":["props","onView","className","onClick","onDelete","onEdit","navigate","useNavigate","React","data","setData","per_page","page_number","pagination","setPagination","load","setLoad","total","setTotal","columns","name","selector","row","id","sortable","to","address","Date","updated_at","toLocaleString","handleEdit","handleDelete","state","url","Constants","fetch","method","headers","userToken","response","json","status","toast","attributes","totalResult","position","theme","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","onSelectedRowsChange","paginationServer","paginationTotalRows","onChangeRowsPerPage","onChangePage"],"sourceRoot":""}